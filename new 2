1- Create a Spring Project With the following Dependencies :
    - Spring Web 
	- Spring Data JPA
	- H2 Data (add the h2 configuration to the application.properties)
2- Create tow Entities (under package called entities)
    - Address Class  (id, street, city)
	- Person  Class  (nId, firstName, lastName, date, age)
3- Adding Relations Between Tables 

   a)One To One Relation (1:1) 
   ----------------------------
    - to implement a one to one relationship we use the JPA annotation @OneToOne at the top of the external filed.
	- RQ: The Class annotated ===> Table modified by adding the foreignKey (Class Person contain @OneToOne ===> Table Person receive de key from Address
	- the name of the join column is generated by default (Tablename_id) to change the join field name we use the annotation 
	     @JoinColumn(name= Adr_FK)
	- To implement the bi-directionality of the relation we add a property person in address table annotated by 
	   @OneToOne(mappedBy="the_property_name_in_the_Other_Table") the mappedBy side is the master of the relation
 
   b) Many To One Relation (n:1)
   ------------------------------   
   to implement this relation we will use a Car example; a Many Cars owned by One Person,
     - we have an entity Car with the external property owner of type Person.
	 - and in the Person class, we have a List of Cars 
       the logic in the DB  the key of the one side migrate to the "many" side.
   
   c) One To Many   Relation (1:n)
   ------------------------------   
   Keep in mind that in the DB  the key of the one side migrates to the "many" side.
   let's implement the case of One person owned many cars, in the person class w should add a List<Car> of cars 
   annotated with @OneToMany.
   the problem here is : 
     the person key will migrate to the car (according to the logic of DB were the one side key migrate to the "many" side)
	 But, the annotation IS NOT in the car class so we will crack the rule of (The Class annotated ===> Table modified by adding the foreignKey)
	 so the solution is that the DBMS will generate an intermediate table (a join Table) 
    
	d) One To Many / Many To One Bidirectional  Relation  
    ------------------------------------------------------   
	after implementing the Many To One and the One To Many Uni-directional 
	know we can have the case when I'm in the car, I can get the owner (person) and when I m in the person I can get
	the list of the owned Cars.
	 - the first idea that comes is the use of mappedBy property. the logic here is "The One is More Powerful than the Many"
	 so the key of the one side will migrate as a join column  and the mappedby will be in the OneToMany
	
	e)  Many To Many   Relation  
    ---------------------------------- --   
    entities can also have a many-to-many relationship. Letâ€™s say you have a list of projects, and a list of person project may have one or more persons working on, and each person may work on multiple projects. 
	In this case, you have many persons related to many projects. to represent the relationship between these 
	two lists of entities we use @ManyToMany annotation.
	
	in the unidirectional case, the ORM create an intermediate table 
	
    

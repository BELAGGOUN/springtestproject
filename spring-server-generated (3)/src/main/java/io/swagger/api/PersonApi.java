/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InlineResponse500;
import io.swagger.model.Person;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-03-06T00:52:27.046Z[GMT]")
@Api(value = "person", description = "the person API")
public interface PersonApi {

    @ApiOperation(value = "", nickname = "personGet", notes = "", response = Person.class, responseContainer = "List", tags={ "person_end_point", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "This is a list of pepole", response = Person.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "This is an unexpected error", response = InlineResponse500.class) })
    @RequestMapping(value = "/person",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Person>> personGet(@ApiParam(value = "Page number to return") @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber
, @Max(100) @ApiParam(value = "Number of result in the page", allowableValues = "") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize
);


    @ApiOperation(value = "", nickname = "personPersonIdGet", notes = "", response = Person.class, tags={ "person_end_point", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "select person", response = Person.class),
        @ApiResponse(code = 500, message = "This is an unexpected error", response = InlineResponse500.class) })
    @RequestMapping(value = "/person/{personId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Person> personPersonIdGet(@ApiParam(value = "",required=true) @PathVariable("personId") Integer personId
);


    @ApiOperation(value = "", nickname = "personPost", notes = "Adding a person  to the list", tags={ "person_end_point", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The person has been saved"),
        @ApiResponse(code = 500, message = "This is an unexpected error", response = InlineResponse500.class) })
    @RequestMapping(value = "/person",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> personPost(@ApiParam(value = ""  )  @Valid @RequestBody Person body
);

}
